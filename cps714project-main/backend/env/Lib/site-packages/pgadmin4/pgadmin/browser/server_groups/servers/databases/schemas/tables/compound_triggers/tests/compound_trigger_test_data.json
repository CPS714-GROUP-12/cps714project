{
  "add_compound_trigger": [
    {
      "name": "Create compound compound trigger for all events",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "test_data": {
        "prosrc": "var varchar2(20) := 'Global_var';\n\n BEFORE STATEMENT IS\nBEGIN\n DBMS_OUTPUT.PUT_LINE('Before Statement: ' || var);\n var := 'BEFORE STATEMENT';\nEND;",
        "evnt_insert": true,
        "evnt_update": true,
        "evnt_delete": true,
        "evnt_truncate": true
      },
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Create compound compound trigger for insert and delete",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "test_data": {
        "prosrc": "var varchar2(20) := 'Global_var';\n\nBEFORE STATEMENT IS\n BEGIN \n DBMS_OUTPUT.PUT_LINE('Before Statement: ' || var);\n    var := 'BEFORE STATEMENT';\nEND;\n\nBEFORE EACH ROW IS\nBEGIN\n    DBMS_OUTPUT.PUT_LINE('Before each row: ' || var);\n    var := 'BEFORE EACH ROW';\nEND;",
        "evnt_insert": true,
        "evnt_update": false,
        "evnt_delete": true
      },
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Create compound compound trigger for insert with when condition",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "test_data": {
        "prosrc": "var varchar2(20) := 'Global_var';\n\n BEFORE EACH ROW IS\nBEGIN\n DBMS_OUTPUT.PUT_LINE('Before each row: ' || var);\n    var := 'EACH ROW';\nEND;",
        "evnt_insert": true,
        "evnt_update": false,
        "evnt_delete": false,
        "whenclause": "NEW.id < 100"
      },
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Create compound compound trigger for insert or update on columns",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "test_data": {
        "prosrc": "var varchar2(20) := 'Global_var';\n\n BEFORE STATEMENT IS\nBEGIN\n DBMS_OUTPUT.PUT_LINE('Before Statement: ' || var);\n var := 'BEFORE STATEMENT';\nEND;\n\nBEFORE EACH ROW IS\nBEGIN\n DBMS_OUTPUT.PUT_LINE('Before each row: ' || var);\n var := 'BEFORE EACH ROW';\nEND;",
        "evnt_insert": true,
        "evnt_update": true,
        "columns": [
          "id",
          "name"
        ]
      },
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Create compound compound trigger for truncate",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "test_data": {
        "prosrc": "var varchar2(20) := 'Global_var';\n\n BEFORE STATEMENT IS\nBEGIN\n DBMS_OUTPUT.PUT_LINE('Before Statement: ' || var);\n var := 'BEFORE STATEMENT';\nEND;",
        "evnt_truncate": true
      },
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Create compound trigger for insert delete and update on view",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "test_data": {
        "prosrc": "var varchar2(20) := 'Global_var';\n\n BEFORE STATEMENT IS\nBEGIN\n DBMS_OUTPUT.PUT_LINE('Before Statement: ' || var);\n var := 'BEFORE STATEMENT';\nEND;",
        "evnt_insert": true,
        "evnt_update": true,
        "evnt_delete": true,
        "evnt_truncate": false
      },
      "on_view": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Create compound trigger for instead of each row",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "test_data": {
        "prosrc": "var varchar2(20) := 'Global_var';\n\n INSTEAD OF EACH ROW IS\nBEGIN\n DBMS_OUTPUT.PUT_LINE('Instead of: ' || var);\n var := 'INSTEAD OF EACH ROW';\nEND;",
        "evnt_insert": true,
        "evnt_update": true,
        "evnt_delete": true,
        "evnt_truncate": false
      },
      "on_view": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Error while adding a compound trigger using wrong table id",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": false,
      "wrong_table_id": true,
      "test_data": {
        "prosrc": "var varchar2(20) := 'Global_var';\n\n BEFORE STATEMENT IS\nBEGIN\n DBMS_OUTPUT.PUT_LINE('Before Statement: ' || var);\n var := 'BEFORE STATEMENT';\nEND;",
        "evnt_insert": true,
        "evnt_update": true,
        "evnt_delete": true,
        "evnt_truncate": true
      },
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 410
      }
    },
    {
      "name": "Error while adding a compound trigger",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": false,
      "test_data": {
        "name": "PLACE_HOLDER",
        "is_row_compound_trigger": true,
        "fires": "BEFORE",
        "columns": [],
        "tfunction": "PLACE_HOLDER",
        "evnt_insert": true
      },
      "mocking_required": true,
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_scalar",
        "return_value": "(False, 'Mocked Internal Server Error ')"
      },
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "Error while while fetching the compound trigger id using compound trigger name",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": false,
      "internal_server_error": true,
      "test_data": {
        "prosrc": "var varchar2(20) := 'Global_var';\n\n BEFORE STATEMENT IS\nBEGIN\n DBMS_OUTPUT.PUT_LINE('Before Statement: ' || var);\n var := 'BEFORE STATEMENT';\nEND;",
        "evnt_insert": true,
        "evnt_update": true,
        "evnt_delete": true,
        "evnt_truncate": true
      },
      "mocking_required": true,
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_scalar",
        "return_value": "(True, True),(False, 'Mocked Internal Server Error ')"
      },
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "Exception while adding a compound trigger",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": false,
      "test_data": {
        "prosrc": "var varchar2(20) := 'Global_var';\n\n BEFORE STATEMENT IS\nBEGIN\n DBMS_OUTPUT.PUT_LINE('Before Statement: ' || var);\n var := 'BEFORE STATEMENT';\nEND;",
        "evnt_insert": true,
        "evnt_update": true,
        "evnt_delete": true,
        "evnt_truncate": true
      },
      "mocking_required": true,
      "error_creating_compound_trigger": true,
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_scalar",
        "return_value": "(False, 'Mocked Internal Server Error ')"
      },
      "expected_data": {
        "status_code": 500
      }
    }
  ],
  "get_compound_trigger": [
    {
      "name": "Get a selected compound trigger URL",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Get a selected compound trigger URL using wrong compound trigger id",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "incorrect_compound_trigger_id": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 410
      }
    },
    {
      "name": "Error while fetching a selected compound trigger node properties",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": false,
      "mocking_required": true,
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_dict",
        "return_value": "(False, 'Mocked Internal Server Error')"
      },
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "Get a properties of all compound triggers under table nodes",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "table_nodes": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Error while fetching a compound trigger properties under table nodes",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": false,
      "table_nodes": true,
      "mocking_required": true,
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_dict",
        "return_value": "(False, 'Mocked Internal Server Error')"
      },
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "Get a compound trigger Node",
      "url": "/browser/compound_trigger/nodes/",
      "is_positive_test": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Get a compound trigger Node using wrong compound trigger id",
      "url": "/browser/compound_trigger/nodes/",
      "is_positive_test": true,
      "incorrect_compound_trigger_id": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 410
      }
    },
    {
      "name": "Get a compound trigger Node dependants",
      "url": "/browser/compound_trigger/dependent/",
      "is_positive_test": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Get a compound trigger Node dependency",
      "url": "/browser/compound_trigger/dependency/",
      "is_positive_test": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Error while fetching the compound trigger under the table nodes using wrong table id",
      "url": "/browser/compound_trigger/nodes/",
      "is_positive_test": false,
      "mocking_required": true,
      "dummy_dict": {
        "rows": [
          {
            "schema": "test_schema_88886",
            "table": "table_compound_trigger_94da770"
          }
        ]
      },
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_2darray",
        "return_value": "(False, 'Mocked Internal Server Error')"
      },
      "expected_data": {
        "status_code": 500,
        "message": "Internal Server Error"
      }
    },
    {
      "name": "Get all the compound trigger under the table nodes",
      "url": "/browser/compound_trigger/nodes/",
      "is_positive_test": true,
      "mocking_required": false,
      "table_nodes": true,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Get all the compound trigger under the table nodes using wrong table id",
      "url": "/browser/compound_trigger/nodes/",
      "is_positive_test": true,
      "incorrect_table_id": true,
      "table_nodes": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Error while fetching all the compound trigger under the table nodes using wrong table id",
      "url": "/browser/compound_trigger/nodes/",
      "is_positive_test": false,
      "table_nodes": true,
      "mocking_required": true,
      "dummy_data": false,
      "dummy_dict": {
        "rows": [
          {
            "schema": "test_schema_88886",
            "table": "table_compound_trigger_94da770"
          }
        ]
      },
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_2darray",
        "return_value": "(False, 'Mocked Internal Server Error')"
      },
      "expected_data": {
        "status_code": 500,
        "message": "Server error"
      }
    },
    {
      "name": "Get a compound trigger SQL using wrong compound trigger id",
      "url": "/browser/compound_trigger/sql/",
      "is_positive_test": true,
      "incorrect_compound_trigger_id": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "Fetch MSQL of compound trigger",
      "url": "/browser/compound_trigger/msql/",
      "is_positive_test": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Fetch msql of compound trigger using wrong compound trigger id",
      "url": "/browser/compound_trigger/msql/",
      "is_positive_test": false,
      "mocking_required": true,
      "mock_data": {
        "function_name": "pgadmin.browser.server_groups.servers.databases.schemas.tables.compound_triggers.utils.get_sql",
        "return_value": "('', 'Mocked response')"
      },
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Error while generating  msql of compound trigger",
      "url": "/browser/compound_trigger/msql/",
      "is_positive_test": false,
      "mocking_required": true,
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_dict",
        "return_value": "(False, 'Mocked Internal Server Error')"
      },
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "Get the modified SQL by passing an argument",
      "url": "/browser/compound_trigger/msql/",
      "is_positive_test": true,
      "mocking_required": false,
      "pass_argument": true,
      "mock_data": {
      },
      "expected_data": {
        "status_code": 200
      }
    }
  ],
  "delete_compound_trigger": [
    {
      "name": "Delete a compound trigger URL",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Error while fetching a compound trigger to delete",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": false,
      "mocking_required": true,
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_dict",
        "return_value": "(False, 'Mocked Internal Server Error')"
      },
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "Error while deleting the compound trigger",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": false,
      "mocking_required": true,
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_scalar",
        "return_value": "(False, 'Mocked Internal Server Error')"
      },
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "compound trigger not found while deleting a compound trigger",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "invalid_compound_trigger_id": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    }
  ],
  "update_compound_trigger": [
    {
      "name": "Exception while fetching a compound trigger to update",
      "url": "/browser/compound_trigger/obj/",
      "new_compound_trigger_id": true,
      "is_positive_test": false,
      "test_data": {
        "description": "This is test comment."
      },
      "mocking_required": true,
      "mock_data": {
        "function_name": "pgadmin.browser.server_groups.servers.databases.schemas.tables.compound_triggers.utils.get_sql",
        "return_value": "(False, 'Mocked response')"
      },
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "Error while getting sql of Updated trigger",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": false,
      "mocking_required": true,
      "dummy_data": false,
      "test_data": {
        "description": "This is test comment."
      },
      "dummy_dict": {
        "rows": [
          {
            "oid": 60299,
            "name": "test_trigger_update_0680105",
            "xmin": "11787",
            "is_enable_trigger": "O",
            "tgrelid": 60289,
            "tgname": "test_trigger_update_0680105",
            "tgfoid": 60298,
            "tgtype": 7,
            "tgenabled": "O",
            "tgisinternal": false,
            "tgconstrrelid": 0,
            "tgconstrindid": 0,
            "tgconstraint": 0,
            "tgdeferrable": false,
            "tginitdeferred": false,
            "tgnargs": 0,
            "tgattr": "",
            "tgargs": "",
            "tgqual": "",
            "tgoldtable": "",
            "tgnewtable": "",
            "relname": "table_trigger_2cadf23",
            "parentistable": true,
            "nspname": "test_schema_b0a5c",
            "description": "",
            "lanname": "plpgsql",
            "prosrc": " BEGIN NULL; END; ",
            "tfunction": "test_schema_b0a5c.trigger_func_add_3d79e4e",
            "whenclause": "",
            "custom_tgargs": [],
            "is_sys_trigger": false,
            "is_constraint_trigger": false,
            "tgoldtable-2": "",
            "tgnewtable-2": ""
          }
        ]
      },
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_dict",
        "return_value": "PlACE_HOLDER"
      },
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "Updated compound trigger not found",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": false,
      "mocking_required": true,
      "updated_trigger": true,
      "dummy_data": {
        "rows": []
      },
      "test_data": {
        "description": "This is test comment."
      },
      "dummy_dict": {
        "rows": [
          {
            "oid": 60299,
            "name": "test_trigger_update_0680105",
            "xmin": "11787",
            "is_enable_trigger": "O",
            "tgrelid": 60289,
            "tgname": "test_trigger_update_0680105",
            "tgfoid": 60298,
            "tgtype": 7,
            "tgenabled": "O",
            "tgisinternal": false,
            "tgconstrrelid": 0,
            "tgconstrindid": 0,
            "tgconstraint": 0,
            "tgdeferrable": false,
            "tginitdeferred": false,
            "tgnargs": 0,
            "tgattr": "",
            "tgargs": "",
            "tgqual": "",
            "tgoldtable": "",
            "tgnewtable": "",
            "relname": "table_trigger_2cadf23",
            "parentistable": true,
            "nspname": "test_schema_b0a5c",
            "description": "",
            "lanname": "plpgsql",
            "prosrc": " BEGIN NULL; END; ",
            "tfunction": "test_schema_b0a5c.trigger_func_add_3d79e4e",
            "whenclause": "",
            "custom_tgargs": [],
            "is_sys_trigger": false,
            "is_constraint_trigger": false,
            "tgoldtable-2": "",
            "tgnewtable-2": ""
          }
        ]
      },
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_dict",
        "return_value": "PlACE_HOLDER"
      },
      "expected_data": {
        "status_code": 500,
        "message": "Error while fetching a trigger to update"
      }
    },
    {
      "name": "update a compound trigger URL",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "mocking_required": false,
      "test_data": {
        "description": "This is test comment."
      },
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Update event and code",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "mocking_required": false,
      "test_data": {
        "evnt_update": true,
        "prosrc": "var varchar2(20) := 'Global_var';\n\n AFTER STATEMENT IS\nBEGIN\n DBMS_OUTPUT.PUT_LINE('After Statement: ' || var);\n    var := 'AFTER STATEMENT';\nEND;\n\nAFTER EACH ROW IS\nBEGIN\n    DBMS_OUTPUT.PUT_LINE('After each row: ' || var);\n    var := 'AFTER EACH ROW';\nEND;"
      },
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Enable Replica compound compound trigger",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "mocking_required": false,
      "mock_data": {},
      "test_data": {
        "is_enable_trigger": "A"
      },
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Disable compound compound trigger",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "mocking_required": false,
      "mock_data": {},
      "test_data": {
        "is_enable_trigger": "D"
      },
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Enable a compound trigger",
      "url": "/browser/compound_trigger/enable/",
      "is_positive_test": true,
      "mocking_required": false,
      "mock_data": {},
      "test_data": {
        "is_enable_trigger": "O"
      },
      "expected_data": {
        "status_code": 200
      }
    },
    {
      "name": "Enable a compound trigger using wrong compound trigger id",
      "url": "/browser/compound_trigger/enable/",
      "is_positive_test": true,
      "mocking_required": false,
      "mock_data": {},
      "wrong_compound_trigger_id": true,
      "test_data": {
        "is_enable_trigger": "O"
      },
      "expected_data": {
        "status_code": 410
      }
    },
    {
      "name": "Error while fetching a compound trigger to enable/disable",
      "url": "/browser/compound_trigger/enable/",
      "is_positive_test": false,
      "mocking_required": true,
      "test_data": {
        "is_enable_trigger": "O"
      },
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_dict",
        "return_value": "(False, 'Mocked Internal Server Error')"
      },
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "Error while enabling a compound trigger",
      "url": "/browser/compound_trigger/enable/",
      "is_positive_test": false,
      "mocking_required": true,
      "test_data": {
        "is_enable_trigger": "O"
      },
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_scalar",
        "return_value": "(False, 'Mocked Internal Server Error')"
      },
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "Exception while enabling a compound trigger",
      "url": "/browser/compound_trigger/enable/",
      "is_positive_test": false,
      "mocking_required": true,
      "dummy_data": false,
      "test_data": {
        "is_enable_trigger": "O"
      },
      "dummy_dict": {
        "rows": [
          1
        ]
      },
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_dict",
        "return_value": "PLACE_HOLDER"
      },
      "expected_data": {
        "status_code": 500,
        "message": ""
      }
    },
    {
      "name": "Error while updating the compound trigger",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": false,
      "mocking_required": true,
      "test_data": {
        "description": "This is test comment."
      },
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_scalar",
        "return_value": "(False, 'Mocked Internal Server Error')"
      },
      "expected_data": {
        "status_code": 500
      }
    },
    {
      "name": "Error while updating the new compound trigger id in browser tree",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": false,
      "mocking_required": true,
      "new_compound_trigger_id": true,
      "test_data": {
        "description": "This is test comment."
      },
      "mock_data": {
        "function_name": "pgadmin.utils.driver.psycopg2.connection.Connection.execute_scalar",
        "return_value": "(True, True),(False, 'Mocked Internal Server Error')"
      },
      "expected_data": {
        "status_code": 500
      }
    }
  ],
  "delete_multiple_compound_trigger": [
    {
      "name": "Delete multiple compound trigger",
      "url": "/browser/compound_trigger/obj/",
      "is_positive_test": true,
      "mocking_required": false,
      "mock_data": {},
      "expected_data": {
        "status_code": 200
      }
    }
  ]
}
